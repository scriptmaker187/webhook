local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local startTime = os.time()

function updateWebhook()
    if not webhookEnabled or WEBHOOK_URL == "" then return end

    local level = LocalPlayer.leaderstats.Level.Value
    local exp = LocalPlayer.otherstats.ExpBar.Value
    local requiredExp = level * 1000
    local progress = (exp / requiredExp) * 100
    local multiplier = tonumber(LocalPlayer.PlayerGui.LevelBar.gamepassText.ContentText:match("%d+%.?%d*")) or 1

    local elapsedTime = os.time() - startTime
    local timePerLevel = (level - (LocalPlayer.leaderstats.Level.Value - 1)) > 0 and (elapsedTime / (level - (LocalPlayer.lederstats.Level.Value - 1))) or 0
    local levelsPerDay = (timePerLevel > 0) and (86400 / timePerLevel) or 0
    local timeToNext1000 = (timePerLevel > 0) and ((1000 - (level % 1000)) * timePerLevel / 3600) or 0

    local embed = {
        title = "🔹 Level-Tracker",
        color = 16776960,
        fields = {
            { name = "📊 Current Level", value = string.format("**Level**: %d", level), inline = true },
            { name = "🔥 EXP", value = string.format("**EXP**: %d / %d (%.2f%%)", exp, requiredExp, progress), inline = true },
            { name = "⚡ Multiplier", value = string.format("**Multiplier**: x%.2f", multiplier), inline = true },
            { name = "📈 Levels Per Day", value = string.format("**Levels per Day**: %.2f", levelsPerDay), inline = true },
            { name = "⏳ Time until next 1000 Level-Mark", value = string.format("**Time to Next 1000 Levels**: %.2f Hours", timeToNext1000), inline = true }
        }
    }

    local requestData = {
        Url = WEBHOOK_URL,
        Method = messageID and "PATCH" or "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode({ embeds = { embed } })
    }

    if messageID then
        requestData.Url = WEBHOOK_URL .. "/messages/" .. messageID
    end

    local response
    if syn and syn.request then
        response = syn.request(requestData)
    elseif http and http.request then
        response = http.request(requestData)
    elseif request then
        response = request(requestData)
    else
        warn("Kein unterstützter Exploit gefunden!")
        return
    end

    if response and response.Body then
        local data = HttpService:JSONDecode(response.Body)
        if data.id then
            messageID = data.id
        end
    end
end

while wait(300) do
    updateWebhook()
end
